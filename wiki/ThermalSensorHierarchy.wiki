#summary One-sentence summary of this page.

= Thermal Sensors =

A thermal sensor is something that gives the temperature in degrees Celsius, a floating point number. Pythonically, it is something that supports the method {{{getTemp()}}}, returning a floating point number.

There are several implementations.

 * *Physical I2C Sensor*: [http://www.microchip.com/wwwproducts/Devices.aspx?dDocName=en010749 Microchip TC74]
 * *Physical I2C Sensor*: [http://www.analog.com/en/mems-sensors/digital-temperature-sensors/ad7414/products/product.html Analog Devices AD7414]
 * (Possibly a couple other pieces of real hardware)
 * *TCP Proxy Sensor*. Imagine that the sensors are spread across a, say, food warehouse. I2C imposes a maximum cable length of only a few meters, so we want to use TCP to connect a local sensor object to a remote sensor. [http://en.wikipedia.org/wiki/Proxy_pattern Proxy pattern], applied.
 * *Composite sensor*. Determines the average temperature based on a number of real sensors.
 * *Composite parallel sensor*. Like composite sensor, determines the average temperature based on a number of real sensors. On each call to {{{getTemp()}}}, it uses the {{{fork(2)}}} system call to create one process for each of the child sensors, and {{{wait(2)}}} and {{{exit(3)}}} to coordinate their lifetimes. It so determines the child temperatures in parallel, rather than one after the other. This can greatly reduces response time, especially if proxy sensors are configured.
 * *Random sensor*. For testing and simulation. Uses {{{/dev/random}}} to retrieve 64 bit random numbers from the system's entropy pool, which are then converted to temperatures in a certain configurable range.
